*modes.nvim* Prismatic line decorations for the adventurous vim user
*Modes*

MIT License Copyright (c) mvllow

==============================================================================

Features:

- Highlight UI elements based on the current mode.

Manage module status:

- |Modes.enable()|
- |Modes.disable()|
- |Modes.toggle()|

# Setup ~

Modes does not require any setup but can be called with your `config` table
to modify default behaviour. This will create a global Lua table `Modes`
which you can use for scripting or manually (with `:lua Modes.*`)

See |Modes.config| for `config` options and default values.

------------------------------------------------------------------------------
                                                                 *Modes.setup()*
                            `Modes.setup`({config})
Module setup

Parameters ~
{config} `(table|nil)` Module config table. See |Modes.config|.

Usage ~
`require('modes').setup({})` (replace `{}` with your `config` table)

------------------------------------------------------------------------------
                                                                  *Modes.config*
                                 `Modes.config`
Module config

Default values:
>lua
  Modes.config = {
  	---@type table<string, string|nil>
  	colors = {
  		bg = nil,
  		copy = nil,
  		delete = nil,
  		insert = nil,
  		replace = nil,
  		visual = nil,
  	},
  	-- Unlisted buffers are ignored by default
  	ignore_filetypes = {},
  	line_opacity = {
  		copy = 0.15,
  		delete = 0.15,
  		insert = 0.15,
  		replace = 0.15,
  		visual = 0.15,
  	},
  	set_cursor = true,
  	set_cursorline = true,
  	set_modemsg = true,
  	set_number = true,
  	set_signcolumn = true,
  }
<

 vim:tw=78:ts=8:noet:ft=help:norl: